{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAmB9C,OAEI,uBAAMC,SAZW,SAACC,GAGlBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,UACI,8CACA,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,cA+B/BZ,EAAYe,WAAa,CACrBd,c,OAAee,EAAUC,KAAKC,Y,mCCzCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACZlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAdAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAOtB,CAACpB,IAEGqB,EDf2BK,CAAa1B,GAAjCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAGtB,OACI,qCACI,6BAAKpB,IACJoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACI,6BAIQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,eEd5BgB,EAAe,WAAO,IAAD,EAGM7C,mBAAS,CAAC,cAHhB,mBAGvB8C,EAHuB,KAGX/C,EAHW,KAM9B,OACI,qCACI,8CACA,uBACJ,cAAC,EAAD,CAAcA,cAAeA,IAIzB,6BAEI+C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MChBzB6B,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0b593244.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const CategoryAdd = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n\n    const handleInputChange = (e) => {\n\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n      \n\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats ]);\n            setInputValue('');\n        }\n\n    }\n    return (\n\n        <form onSubmit={handleSubmit}>\n            <h2>Add Category</h2>\n            <input\n                type='text'\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n\n        </form>\n\n\n\n    )\n\n\n}\nCategoryAdd.protoTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=sZQ3ox6LpfcHxyAlmfSdpqUdgKQEnjRQ`\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n\n        }\n\n\n    })\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n    \n    return (\n        <div className=\"card animate__animated animate__bounce\">\n           \n            <img src={url} alt={title} />\n            <p>{title}</p>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">loading</p>}\n            <div className=\"card-grid\">\n                <ol>\n\n                    {\n\n                        images.map(img => (\n                            <GifGridItem\n                                key={img.id}\n                                {...img}\n                            />\n                        ))\n                    }\n\n                </ol>\n\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n\n                })\n\n\n            })\n\n    }, [category])\n\n    return state;//{data:[],loading:true}\n\n\n}","import React, { Fragment, useState } from 'react'\n\n\nimport { CategoryAdd } from './components/CategoryAdd'\nimport { GifGrid } from './components/GifGrid'\n\n\nexport const GifExpertApp = () => {\n\n    \n    const [categories, setCategories] = useState(['One Punch'])\n\n\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <hr />\n        <CategoryAdd  setCategories={setCategories}   />\n\n            \n\n            <ol>\n                {\n                categories.map(category =>\n                    <GifGrid \n                    key={category}\n                    category={category} />)\n\n                }\n            </ol>\n\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\n//import './index.css';\nimport '../src/index.css'\n\n\nReactDOM.render(\n\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}